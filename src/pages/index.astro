---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import LinkButton from "@components/LinkButton.astro";
import Hr from "@components/Hr.astro";
import Socials from "@components/Socials.astro";
import DoiPaperFeed from "@components/DoiPaperFeed.astro";
import { SITE, SOCIALS } from "@config";
import "../styles/home.css";

// Get projects
const projects = await getCollection("projects");
const featuredProjects = projects
  .filter(project => project.data.featured)
  .sort((a, b) => new Date(b.data.startDate).valueOf() - new Date(a.data.startDate).valueOf())
  .slice(0, 3);

// Get team members
const teamMembers = await getCollection("team");

// Define role hierarchy for sorting, matching Team.astro
const roleOrder = [
  "Lab Director",
  "PhD Candidate",
  "Professor",
  "Associate Professor",
  "Assistant Professor", 
  "PhD Student", 
  "Visiting Researcher",
  "Graduate Student", 
  "Master's Student",
  "Undergraduate Student", 
  "Alumni",
  "Collaborator"
];

// Sort team members by role priority and then by name
const sortedTeamMembers = teamMembers
  .filter(member => member.data.featured !== false)
  .sort((a, b) => {
    // First sort by role hierarchy
    const aIndex = roleOrder.findIndex(role => a.data.role.includes(role));
    const bIndex = roleOrder.findIndex(role => b.data.role.includes(role));
    
    if (aIndex !== bIndex) {
      // If role isn't in our predefined list, put it at the end
      if (aIndex === -1) return 1;
      if (bIndex === -1) return -1;
      
      return aIndex - bIndex;
    }
    
    // If same role, sort by name
    return a.data.name.localeCompare(b.data.name);
  });

// Get top 6 team members after sorting
const displayTeamMembers = sortedTeamMembers.slice(0, 12);

// Get publications with improved sorting logic to guarantee newest papers appear
const publications = await getCollection("publications");

// Log publication dates to help debug
console.log("Available publication dates:");
publications.forEach(pub => {
  const date = pub.data.manual_override?.publication_date || 
               pub.data.publicationDate || 
               pub.data.date;
  if (date) {
    console.log(`${pub.data.doi}: ${date}`);
  }
});

// Extract year from various date formats
function getPublicationYear(pub) {
  const dateStr = pub.data.manual_override?.publication_date || 
                 pub.data.publicationDate || 
                 pub.data.date;
  
  if (dateStr) {
    // Try to extract year from date string
    const yearMatch = dateStr.match(/\b(20\d\d)\b/);
    if (yearMatch) return yearMatch[0];
  }
  
  // Fall back to DOI-based year extraction
  if (pub.data.doi) {
    const doiYearMatch = pub.data.doi.match(/\b(20\d\d)\b/);
    if (doiYearMatch) return doiYearMatch[0];
  }
  
  return null;
}

// Sort publications: newest first, with featured at the top
const sortedPubs = publications
  .filter(pub => pub.data.doi)
  .map(pub => ({
    doi: pub.data.doi,
    featured: pub.data.featured || false,
    year: getPublicationYear(pub),
    dateObj: (() => {
      const dateStr = pub.data.manual_override?.publication_date || 
                     pub.data.publicationDate || 
                     pub.data.date;
      if (dateStr) {
        try {
          return new Date(dateStr);
        } catch (e) {
          return null;
        }
      }
      return null;
    })()
  }))
  .sort((a, b) => {
    // Featured publications first
    if (a.featured && !b.featured) return -1;
    if (!a.featured && b.featured) return 1;
    
    // Then by explicit year if available
    if (a.year && b.year && a.year !== b.year) {
      return parseInt(b.year) - parseInt(a.year);
    }
    
    // Then by date object if available
    if (a.dateObj && b.dateObj && !isNaN(a.dateObj) && !isNaN(b.dateObj)) {
      return b.dateObj.getTime() - a.dateObj.getTime();
    }
    
    return 0;
  });

// Now extract just the DOIs
const sortedDois = sortedPubs.map(pub => pub.doi);

// Log the final sort order to help debug
console.log("Publication sort order on home page:");
sortedPubs.slice(0, 10).forEach((pub, i) => {
  console.log(`${i+1}. ${pub.doi} - Year: ${pub.year} - Featured: ${pub.featured}`);
});

const socialCount = SOCIALS.filter(social => social.active).length;

// Format date helper
function formatDate(date) {
  if (!date) return "";
  const parsedDate = date instanceof Date ? date : new Date(date);
  if (isNaN(parsedDate.getTime())) return "";
  
  return parsedDate.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short'
  });
}
---

<Layout>
  <Header />
  <main id="main-content" class="irl-ct-main">
    <section id="hero" class="irl-ct-hero">
      <div class="hero-content">
        <h1>Interaction Research Lab</h1>
        <p class="hero-tagline">
          Designing interactions with exploratory, frontier methods and extracting insights about interaction using cutting-edge computational methods.
        </p>
        <p class="hero-description">
          The Interaction Research Lab explores the intersection of human behavior, 
          technology, and design to create more intuitive, accessible, and meaningful interactions at all scales, from face-to-face encounters to city-scale phenomena.
        </p>
        <div class="hero-buttons">
          <a href="/projects/" class="secondary-button">
            View Projects
          </a>
        </div>
      </div>
      <div class="hero-video-container">
        <iframe 
          class="hero-video"
          src="https://www.youtube.com/embed/o52MZ1AHyjA?si=q7sPaSTebT1WbJMS" 
          title="Interaction Research Lab Research Overview"
          frameborder="0" 
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen>
        </iframe>
      </div>
    </section>


    <div class="main-with-sidebar-layout">
      <div class="main-content">
        <section id="featured-projects">
          <h2>Featured Research</h2>
          <div class="project-list">
            {
              featuredProjects.map(project => (
                <a href={`/projects/${project.slug}/`} class="project-card">
                  <div class="project-image">
                    {project.data.image ? (
                      <img src={project.data.image.src} alt={project.data.title} />
                    ) : (
                      <div class="project-image-placeholder"></div>
                    )}
                  </div>
                  <div class="project-card-content">
                    <div class="project-status-badge" data-status={project.data.status}>
                      {project.data.status}
                    </div>
                    <h3>{project.data.title}</h3>
                    <p>{project.data.summary}</p>
                  </div>
                </a>
              ))
            }
          </div>
          <div class="section-link">
            <LinkButton href="/projects/">
              All Projects
              <svg xmlns="http://www.w3.org/2000/svg"
                ><path
                  d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"
                ></path>
              </svg>
            </LinkButton>
          </div>
        </section>


        <section id="team-members">
          <h2>Research Team</h2>
          <div class="team-grid">
            {
              displayTeamMembers.map(member => (
                <a href={`/team/${member.slug}/`} class="team-card">
                  {member.data.avatar ? (
                    <div class="member-avatar">
                      <img 
                        src={member.data.avatar.src} 
                        alt={`Photo of ${member.data.name}`} 
                      />
                    </div>
                  ) : (
                    <div class="member-avatar">
                      <div class="avatar-placeholder">
                        {member.data.name.charAt(0)}
                      </div>
                    </div>
                  )}
                  <div class="member-info">
                    <h3>{member.data.name}</h3>
                    <p>{member.data.role}</p>
                  </div>
                </a>
              ))
            }
          </div>
          <div class="section-link">
            <LinkButton href="/team/">
              View Full Team
              <svg xmlns="http://www.w3.org/2000/svg">
                <path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"></path>
              </svg>
            </LinkButton>
          </div>
        </section>

        {
          socialCount > 0 && (
            <div class="social-wrapper">
              <div class="social-links">Connect with us:</div>
              <Socials />
            </div>
          )
        }
      </div>

      <div class="sidebar">
        <aside class="publications-sidebar">
          <DoiPaperFeed 
            dois={sortedDois} 
            title="Recent Publications" 
            viewAllUrl="/publications/"
            maxItems={6}  <!-- Increased from 5 to 6 to ensure newest are visible -->
          />
        </aside>
      </div>
    </div>
  </main>

  <Footer />
</Layout>
