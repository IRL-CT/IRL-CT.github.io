---
import { LOGO_IMAGE, SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";

export interface Props {
  activeNav?: | "team" | "projects" | "publications" | "search";
}

const { activeNav } = Astro.props;
---

<header>
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="nav-container">
    <div class="header-content">
      <a href="/" class="logo whitespace-nowrap">
          {
            LOGO_IMAGE.enable ? (
              <img
                src={`/assets/${LOGO_IMAGE.svg ? "logo.svg" : "logo.png"}`}
                class="logo-img dark:invert transition-all duration-200"
                alt={SITE.title}
                width={LOGO_IMAGE.width}
                height={LOGO_IMAGE.height}
              />
            ) : (
              SITE.title
            )
          }
      </a>
      
      <hr class="header-divider" />
      
      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="menu-icon"
          >
            <line x1="7" y1="12" x2="21" y2="12" class="line"></line>
            <line x1="3" y1="6" x2="21" y2="6" class="line"></line>
            <line x1="12" y1="18" x2="21" y2="18" class="line"></line>
            <line x1="18" y1="6" x2="6" y2="18" class="close"></line>
            <line x1="6" y1="6" x2="18" y2="18" class="close"></line>
          </svg>
        </button>
        <ul id="menu-items" class="hidden sm:flex sm:items-center sm:mt-0 sm:w-auto">
          <li>
            <a href="/team" class={activeNav === "team" ? "active" : ""}>
              team
            </a>
          </li>
          <li>
            <a href="/projects" class={activeNav === "projects" ? "active" : ""}>
              projects
            </a>
          <li>
            <a href="/publications/" class={activeNav === "publications" ? "active" : ""}>
              publications
            </a>
          </li>
          {
            SITE.showArchives && (
              <li>
                <LinkButton
                  href="/archives/"
                  className={`focus-outline flex justify-center p-3 sm:p-1`}
                  ariaLabel="archives"
                  title="Archives"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class:list={[
                      "icon icon-tabler icons-tabler-outline !hidden sm:!inline-block",
                      activeNav === "archives" && "!stroke-skin-accent",
                    ]}
                  >
                    <>
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M3 4m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v0a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z" />
                      <path d="M5 8v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-10" />
                      <path d="M10 12l4 0" />
                    </>
                  </svg>
                  <span
                    class:list={[
                      "sm:sr-only",
                      activeNav === "archives" && "active",
                    ]}
                  >
                    Archives
                  </span>
                </LinkButton>
              </li>
            )
          }
          <li>
            <LinkButton
              href="/search/"
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              } flex`}
              ariaLabel="search"
              title="Search"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="scale-125 sm:scale-100"
                ><path
                  d="M19.023 16.977a35.13 35.13 0 0 1-1.367-1.384c-.372-.378-.596-.653-.596-.653l-2.8-1.337A6.962 6.962 0 0 0 16 9c0-3.859-3.14-7-7-7S2 5.141 2 9s3.14 7 7 7c1.763 0 3.37-.66 4.603-1.739l1.337 2.8s.275.224.653.596c.387.363.896.854 1.384 1.367l1.358 1.392.604.646 2.121-2.121-.646-.604c-.379-.372-.885-.866-1.391-1.36zM9 14c-2.757 0-5-2.243-5-5s2.243-5 5-5 5 2.243 5 5-2.243 5-5 5z"
                ></path>
              </svg>
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>
          {
            SITE.lightAndDarkMode && (
              <li>
                <button
                  id="theme-btn"
                  class="focus-outline"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" id="moon-svg" viewBox="0 0 24 24" width="24" height="24">
                    <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z" />
                  </svg>
                  <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg" viewBox="0 0 24 24" width="24" height="24">
                    <path d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z" />
                  </svg>
                </button>
              </li>
            )
          }
          
          <!-- Reader Mode Button -->
          <li>
            <button
              id="reader-mode-btn"
              class="focus-outline"
              title="Toggle reader mode"
              aria-label="Toggle reader mode"
              aria-live="polite"
            >
            <?xml version="1.0" encoding="iso-8859-1"?>
            <!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
            <svg fill="#000000" height="800px" width="800px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
               viewBox="0 0 489.6 489.6" xml:space="preserve" class="reader-glasses">
            <g>
              <g>
                <g>
                  <path d="M353.7,85.738c6.5-2,13.5-1.3,19.5,1.9c6,3.2,10.4,8.6,12.4,15.1v0.1c0,0,0,0,0,0.1l43,136.4c-13-5.9-27.5-9.2-42.7-9.2
                    c-52,0-95.1,38.4-102.5,88.4H206c-8.2-49-50.9-86.5-102.3-86.5c-15.3,0-29.8,3.3-42.8,9.3l43.5-138.3c0,0,0,0,0-0.1v-0.1
                    c4.1-13.5,18.4-21.1,31.9-17c9.1,2.7,18.6-2.4,21.4-11.4c2.8-9.1-2.4-18.6-11.4-21.4c-31.5-9.6-64.9,8.2-74.6,39.6c0,0,0,0,0,0.1
                    v0.1l0,0l0,0l-63.8,202.6c-0.2,0.6-0.3,1.2-0.5,1.8c-4.8,11.9-7.4,24.9-7.4,38.4c0,57.2,46.5,103.7,103.7,103.7
                    c51.3,0,94.1-37.5,102.3-86.5h78c8.9,48.1,51.2,84.7,101.9,84.7c57.2,0,103.7-46.5,103.7-103.7c0-13.7-2.7-26.7-7.5-38.7
                    l-63.8-202.5v-0.1c-4.7-15.2-15-27.7-29-35.2c-14.1-7.5-30.3-9.1-45.6-4.5c-9.1,2.8-14.2,12.3-11.4,21.4
                    C335,83.438,344.6,88.538,353.7,85.738z M103.7,405.038c-38.3,0-69.4-31.1-69.4-69.4s31.1-69.4,69.4-69.4s69.4,31.1,69.4,69.4
                    S142,405.038,103.7,405.038z M385.9,403.238c-38.3,0-69.4-31.1-69.4-69.4s31.1-69.4,69.4-69.4s69.4,31.1,69.4,69.4
                    S424.1,403.238,385.9,403.238z"/>
                </g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
              <g>
              </g>
            </g>
            </svg>
            </button>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  function toggleNav() {
    // Toggle menu
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const menuItems = document.querySelector("#menu-items");
    
    // Create a special backdrop that has a clickable area outside the menu
    if (!document.querySelector(".menu-backdrop")) {
      const backdrop = document.createElement("div");
      backdrop.classList.add("menu-backdrop");
      document.body.appendChild(backdrop);
      
      // Add a separate overlay element that will handle the clicks
      const clickOverlay = document.createElement("div");
      clickOverlay.classList.add("menu-click-overlay");
      clickOverlay.style.position = "fixed";
      clickOverlay.style.inset = "0";
      clickOverlay.style.zIndex = "39"; // Below menu but above other elements
      clickOverlay.style.display = "none";
      document.body.appendChild(clickOverlay);
      
      // Add click event to the click overlay
      clickOverlay.addEventListener("click", (e) => {
        // Check if click is outside the menu
        if (menuBtn?.getAttribute("aria-expanded") === "true") {
          const menu = document.getElementById("menu-items");
          if (menu && !menu.contains(e.target) && e.target !== menu) {
            menuBtn.click(); // Close menu if click is outside
          }
        }
      });
      
      // Modify the original backdrop management in the toggle function
      menuBtn?.addEventListener("click", () => {
        const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
        menuIcon?.classList.toggle("is-active");
        menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
        menuBtn.setAttribute("aria-label", menuExpanded ? "Open Menu" : "Close Menu");
        
        // Toggle menu visibility
        if (menuItems) {
          if (menuExpanded) {
            // Close menu
            menuItems.classList.add("hidden");
            menuItems.classList.remove("display-nav");
            backdrop.classList.remove("is-active");
            clickOverlay.style.display = "none";
            setTimeout(() => {
              backdrop.style.display = "none";
            }, 200);
          } else {
            // Open menu
            backdrop.style.display = "block";
            setTimeout(() => {
              backdrop.classList.add("is-active");
              menuItems.classList.remove("hidden");
              menuItems.classList.add("display-nav");
              clickOverlay.style.display = "block";
            }, 10);
          }
        }
        
        // Prevent scrolling when menu is open
        document.body.style.overflow = menuExpanded ? "" : "hidden";
      });
    }
    
    // Fix menu item click handling
    const menuLinks = menuItems?.querySelectorAll("a, button");
    menuLinks?.forEach(link => {
      link.addEventListener("click", (e) => {
        // Only close menu for navigation links, not utility buttons
        if (!link.classList.contains("toggle-btn") && 
            !link.id.includes("theme-btn") && 
            !link.id.includes("reader-mode-btn") &&
            menuBtn?.getAttribute("aria-expanded") === "true") {
          setTimeout(() => menuBtn.click(), 100);
        }
      });
    });
  }

  // Reader Mode functionality
  function setupReaderMode() {
    const readerModeBtn = document.getElementById("reader-mode-btn");
    const htmlElement = document.documentElement;
    
    // Check if reader mode was previously enabled
    const isReaderMode = localStorage.getItem("reader-mode") === "true";
    
    // Apply reader mode if it was previously enabled
    if (isReaderMode) {
      htmlElement.classList.add("reader-mode");
    }
    
    readerModeBtn?.addEventListener("click", () => {
      // Toggle the reader-mode class on the html element
      htmlElement.classList.toggle("reader-mode");
      
      // Save the state to localStorage
      const newState = htmlElement.classList.contains("reader-mode");
      localStorage.setItem("reader-mode", newState);
      
      // Announce the change for screen readers
      readerModeBtn.setAttribute(
        "aria-label", 
        newState ? "Disable reader mode" : "Enable reader mode"
      );
    });
  }

  // Additional reader mode functionality for section headers
  function setupReaderModeHeaders() {
    // Only run if in reader mode
    if (!document.documentElement.classList.contains('reader-mode')) return;
    
    // Setup click handlers for Team header
    const teamHeader = document.getElementById('team-header');
    if (teamHeader) {
      teamHeader.addEventListener('click', (e) => {
        window.location.href = '/team/';
      });
    }
    
    // Setup click handlers for Publications header
    const pubsHeader = document.getElementById('publications-header');
    if (pubsHeader) {
      pubsHeader.addEventListener('click', (e) => {
        window.location.href = '/publications/';
      });
    }
  }

  // Initialize all functions
  toggleNav();
  setupReaderMode();
  
  // Run the header setup when toggling reader mode
  document.getElementById('reader-mode-btn')?.addEventListener('click', () => {
    setTimeout(setupReaderModeHeaders, 100); // Small delay to ensure DOM is updated
  });

  // Also run on page load
  document.addEventListener('DOMContentLoaded', setupReaderModeHeaders);

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", () => {
    toggleNav();
    setupReaderMode();
    setupReaderModeHeaders();
  });
</script>
