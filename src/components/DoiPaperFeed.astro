---
import LinkButton from "./LinkButton.astro";
import type { CollectionEntry } from "astro:content";

export interface Props {
  publications: CollectionEntry<"publications">[];
  title?: string;
  showViewAllLink?: boolean;
  viewAllUrl?: string;
  maxItems?: number;
  className?: string;
  itemsPerPage?: number;
  enablePagination?: boolean;
  enableSearch?: boolean;
  searchInputId?: string;
}

const { 
  publications, 
  title = "Recent Publications",
  showViewAllLink = true,
  viewAllUrl = "/publications/",
  maxItems = 100,
  className = "",
  itemsPerPage = 20,
  enablePagination = false,
  enableSearch = false,
  searchInputId = ""
} = Astro.props;

// Limit the total number of publications we'll handle
const limitedPubs = publications.slice(0, maxItems);

// Format date helper function
function formatDate(date) {
  if (!date) return "";
  const parsedDate = date instanceof Date ? date : new Date(date);
  if (isNaN(parsedDate.getTime())) return "";
  
  return parsedDate.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short'
  });
}

// Get year from a publication
function getPublicationYear(dateStr) {
  // Ensure dateStr is a string before using string methods
  if (dateStr === null || dateStr === undefined) {
    return "Unknown Year";
  }
  
  // If it's a Date object, convert to string
  if (dateStr instanceof Date) {
    return dateStr.getFullYear().toString();
  }
  
  // Convert any non-string type to string
  if (typeof dateStr !== 'string') {
    dateStr = String(dateStr);
  }
  
  // Now we can safely use match
  const match = dateStr.match(/\b(19|20)\d{2}\b/);
  if (match) {
    return match[0];
  }
  
  // Fallback: try to extract year from date string
  try {
    const date = new Date(dateStr);
    if (!isNaN(date.getTime())) {
      return date.getFullYear().toString();
    }
  } catch (e) {
    console.error("Failed to parse date", e);
  }
  
  return "Unknown Year";
}

// Calculate pagination info
const totalItems = limitedPubs.length;
const totalPages = Math.ceil(totalItems / itemsPerPage);
---

<div class={`doi-paper-feed ${className}`} id="doi-paper-feed">
  {title && <h2>{title}</h2>}
  
  {limitedPubs.length === 0 ? (
    <p class="empty-message">No publications available.</p>
  ) : (
    <div>
      <ul class="publication-list-home" id="publication-list">
        {limitedPubs.map((pub, index) => (
          <li 
            class="publication-item-home" 
            data-year={getPublicationYear(pub)}
            data-index={index}
            data-pagination-page={Math.floor(index / itemsPerPage) + 1}
            style={enablePagination && index >= itemsPerPage ? "display: none;" : ""}
          >
            <h3 class="publication-title">
              {pub.data.manual_override?.citation || `Publication ${pub.data.doi}`}
            </h3>
            {pub.data.manual_override?.authors && (
              <p class="publication-authors">
                {Array.isArray(pub.data.manual_override.authors) 
                  ? pub.data.manual_override.authors.join(", ")
                  : pub.data.manual_override.authors}
              </p>
            )}
            {pub.data.manual_override?.journal && (
              <p class="publication-venue">{pub.data.manual_override.journal}</p>
            )}
            <p class="publication-date">
              {pub.data.manual_override?.publication_date 
                ? formatDate(pub.data.manual_override.publication_date)
                : getPublicationYear(pub)}
            </p>
            <a 
              href={`https://doi.org/${pub.data.doi}`} 
              class="publication-link"
              target="_blank"
              rel="noopener noreferrer"
            >
              View Paper
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                <polyline points="15 3 21 3 21 9"></polyline>
                <line x1="10" y1="14" x2="21" y2="3"></line>
              </svg>
            </a>
          </li>
        ))}
      </ul>
      
      <!-- No results message placeholder -->
      <p class="no-results-message" style="display: none;">
        No publications found matching your search.
      </p>
      
      <!-- Pagination Controls -->
      <div class="pagination-controls">
        <p class="pagination-info" id="pagination-counter">
          Showing <span id="visible-count">{Math.min(itemsPerPage, totalItems)}</span> of <span id="total-count">{totalItems}</span> publications
        </p>
        {enablePagination && totalPages > 1 && (
          <button id="load-more-btn" class="load-more-btn">
            Load More Publications
          </button>
        )}
      </div>
    </div>
  )}
  
  {showViewAllLink && publications.length > 0 && !enablePagination && (
    <div class="section-link">
      <LinkButton href={viewAllUrl}>
        All Publications
        <svg xmlns="http://www.w3.org/2000/svg"
          ><path
            d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"
          ></path>
        </svg>
      </LinkButton>
    </div>
  )}
</div>

<script define:vars={{ itemsPerPage, totalItems, totalPages, enablePagination, searchInputId }}>
  // Component initialization
  (function() {
    // Wait for DOM to be fully ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeComponent);
    } else {
      initializeComponent();
    }

    function initializeComponent() {
      // Get component settings from data attributes
      const feedElement = document.getElementById('doi-paper-feed');
      if (!feedElement) return;
      
      // Component state
      const state = {
        currentPage: 1,
        isSearching: false,
        searchTerm: '',
        visibleCount: Math.min(itemsPerPage, totalItems)
      };

      // Get DOM elements
      const allItems = Array.from(document.querySelectorAll('.publication-item-home'));
      const loadMoreBtn = document.getElementById('load-more-btn');
      const noResultsMessage = document.querySelector('.no-results-message');
      const paginationCounter = document.getElementById('pagination-counter');
      
      // Use 'let' instead of 'const' for elements that will be reassigned
      let visibleCountEl = document.getElementById('visible-count');
      let totalCountEl = document.getElementById('total-count');
      
      // Get search input if ID was provided
      let searchInput = null;
      let clearSearchBtn = null;
      
      if (searchInputId) {
        searchInput = document.getElementById(searchInputId);
        if (searchInput) {
          // Find clear button if it exists
          const parent = searchInput.parentElement;
          if (parent) {
            clearSearchBtn = parent.querySelector('button[title="Clear search"]');
          }
        }
      }

      // ===== SEARCH FUNCTIONALITY =====
      
      function performSearch(term) {
        // Always clean the term
        const searchTerm = (term || '').toLowerCase().trim();
        
        // Only update if the search term changed
        if (searchTerm === state.searchTerm) return;
        
        // Update state
        state.searchTerm = searchTerm;
        state.isSearching = searchTerm !== '';
        
        // Count matches
        let matchCount = 0;
        
        // Show or hide items based on search
        allItems.forEach(item => {
          const titleElement = item.querySelector('.publication-title');
          const authorElement = item.querySelector('.publication-authors');
          
          if (!titleElement) return;
          
          const title = titleElement.textContent.toLowerCase();
          const authors = authorElement ? authorElement.textContent.toLowerCase() : '';
          
          // An item matches if the search term is empty or found in title/authors
          const matches = !state.isSearching || 
                         title.includes(searchTerm) ||
                         authors.includes(searchTerm);
                         
          // Store match status directly on the element
          item.dataset.matches = matches ? 'true' : 'false';
          
          // Show matching items, hide non-matching
          if (state.isSearching) {
            // When searching, show all matches regardless of pagination
            item.style.display = matches ? '' : 'none';
            
            if (matches) matchCount++;
          } else {
            // When not searching, restore pagination visibility
            const pageNum = parseInt(item.dataset.paginationPage || '1', 10);
            item.style.display = (pageNum <= state.currentPage) ? '' : 'none';
          }
        });
        
        // Show/hide no results message
        if (noResultsMessage) {
          noResultsMessage.style.display = (state.isSearching && matchCount === 0) ? 'block' : 'none';
        }
        
        // Update pagination controls
        if (paginationCounter) {
          if (state.isSearching) {
            paginationCounter.innerHTML = `Found <span>${matchCount}</span> of ${totalItems} publications matching "${searchTerm}"`;
          } else {
            updatePaginationCounter();
          }
        }
        
        // Show/hide load more button
        if (loadMoreBtn) {
          loadMoreBtn.style.display = (state.isSearching || state.currentPage >= totalPages) ? 'none' : '';
        }
        
        return matchCount;
      }
      
      // ===== PAGINATION FUNCTIONALITY =====
      
      function loadMoreItems() {
        // Don't do anything if searching
        if (state.isSearching) return;
        
        // Increment page
        state.currentPage++;
        
        // Calculate how many items to show
        state.visibleCount = Math.min(state.currentPage * itemsPerPage, totalItems);
        
        // Show items from the next page
        allItems.forEach(item => {
          const pageNum = parseInt(item.dataset.paginationPage || '1', 10);
          if (pageNum === state.currentPage) {
            item.style.display = '';
          }
        });
        
        // Update counter
        updatePaginationCounter();
        
        // Hide button if we're at the last page
        if (loadMoreBtn && state.currentPage >= totalPages) {
          loadMoreBtn.style.display = 'none';
        }
      }
      
      function updatePaginationCounter() {
        if (!visibleCountEl || !paginationCounter) return;
        
        // Update the visible count
        visibleCountEl.textContent = state.visibleCount;
        
        // Make sure the counter shows "Showing X of Y publications"
        if (!state.isSearching) {
          paginationCounter.innerHTML = `Showing <span id="visible-count">${state.visibleCount}</span> of <span id="total-count">${totalItems}</span> publications`;
          // Re-query elements after innerHTML change (no error now since we used 'let')
          visibleCountEl = document.getElementById('visible-count');
          totalCountEl = document.getElementById('total-count');
        }
      }
      
      // ===== EVENT LISTENERS =====
      
      // Set up search input event listeners
      if (searchInput) {
        // Listen for input changes
        searchInput.addEventListener('input', () => {
          performSearch(searchInput.value);
        });
        
        // Listen for Enter key
        searchInput.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            performSearch(searchInput.value);
          }
        });
        
        // Set up clear button
        if (clearSearchBtn) {
          clearSearchBtn.addEventListener('click', () => {
            searchInput.value = '';
            performSearch('');
            searchInput.focus();
          });
        }
        
        // Initial search if there's a value
        if (searchInput.value) {
          performSearch(searchInput.value);
        }
      }
      
      // Set up load more button
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', loadMoreItems);
      }
    }
  })();
</script>

<style>
  .doi-paper-feed {
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .doi-paper-feed h2 {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: rgb(var(--color-accent));
  }

  .publication-list-home {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    flex: 1;
    min-height: 300px; /* Ensures minimum height even when empty */
  }

  .publication-item-home {
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(var(--color-border), 0.8);
  }
  
  .publication-item-home:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }
  
  .publication-item-home h3 {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.5rem;
    line-height: 1.4;
    color: rgb(var(--color-text-base));
  }

  .publication-authors,
  .publication-venue,
  .publication-date {
    font-size: 0.85rem;
    margin: 0.25rem 0;
    color: rgba(var(--color-text-base), 0.7);
  }

  .publication-authors {
    font-style: italic;
  }

  .publication-link {
    font-size: 0.85rem;
    color: rgb(var(--color-accent));
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-top: 0.5rem;
    font-weight: 500;
  }

  .publication-link:hover {
    text-decoration: underline;
  }

  .publication-results-counter {
    margin-top: 1.5rem;
    text-align: center;
    color: rgba(var(--color-text-base), 0.7);
    font-size: 0.9rem;
    font-style: italic;
  }

  .section-link {
    text-align: center;
    margin-top: 2rem;
  }
  
  .empty-message,
  .error-message,
  .info-message {
    text-align: center;
    padding: 1rem 0;
    font-size: 0.9rem;
    color: rgba(var(--color-text-base), 0.8);
    font-style: italic;
  }
  
  .error-message {
    color: #e53e3e;
  }

  .info-message {
    background-color: rgba(var(--color-card-muted), 0.3);
    padding: 0.75rem;
    border-radius: 0.25rem;
    margin-top: 1rem;
  }

  /* Pagination Controls */
  .pagination-controls {
    margin-top: 2rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .pagination-info {
    font-size: 0.9rem;
    color: rgba(var(--color-text-base), 0.8);
    text-align: center;
  }
  
  .load-more-btn {
    background-color: rgb(var(--color-accent));
    color: rgb(var(--color-card));
    border: none;
    border-radius: 0.25rem;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .load-more-btn:hover {
    background-color: rgba(var(--color-accent), 0.8);
  }
  
  .load-more-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(var(--color-accent), 0.3);
  }
  
  .no-results-message {
    text-align: center;
    padding: 1.5rem;
    color: rgba(var(--color-text-base), 0.7);
    font-style: italic;
  }
</style>
